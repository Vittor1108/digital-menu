// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Establishment {
  id                  Int      @id @default(autoincrement())
  email               String   @unique
  name                String
  password            String
  cpfCnpj             String   @unique
  tokenActiveAccount  String   @unique
  tokenForgotPassword String?  @unique
  activeAccount       Boolean  @default(false)
  createdAt           DateTime @default(now())
  updeatedAt          DateTime @default(now()) @updatedAt

  @@map("Establishment")
}

model Category {
  id              Int                @id @default(autoincrement())
  establishmentId Int
  name            String
  description     String
  createdAt       DateTime           @default(now())
  updeatedAt      DateTime           @default(now()) @updatedAt
  CategoryProduct Product_Category[]
  PhotoCategory   PhotoCategory[]

  @@map("categories")
}

model PhotoCategory {
  id           Int      @id @default(autoincrement())
  category_id  Int
  filename     String
  originalname String
  url          String
  category     Category @relation(fields: [category_id], references: [id])
  created_at   DateTime @default(now())
  updeated_at  DateTime @default(now()) @updatedAt

  @@map("photo_categories")
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  price             Float
  avargePrice       Float?
  establishmentId   Int
  ProductCategory  Product_Category[]
  ProductPhoto      ProductPhoto[]
  ProductIngredient ProductIngredient[]
  createdAt        DateTime            @default(now())
  updeatedAt       DateTime            @default(now()) @updatedAt

  @@map("products")
}

model Product_Category {
  product     Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId  Int
  categoryId Int
  category    Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at  DateTime @default(now())
  updeated_at DateTime @default(now()) @updatedAt

  @@id([categoryId, productId])
  @@map("products_categories")
}

model ProductIngredient {
  id            Int         @id @default(autoincrement())
  qtd           Float
  productId     Int
  rawMaterialId Int
  Product       Product     @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  RawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model RawMaterial {
  id                Int                 @id @default(autoincrement())
  name              String
  quantityGg        Float
  averagePrice      Float
  averagePriceGg    Float
  measureRegister   Int
  user_id           Int
  ProductIngredient ProductIngredient[]

  @@map("raw_material")
}

model ProductPhoto {
  id           Int      @id @default(autoincrement())
  product_id   Int
  product      Product  @relation(fields: [product_id], references: [id])
  filename     String
  originalname String
  url          String
  created_at   DateTime @default(now())
  updeated_at  DateTime @default(now()) @updatedAt

  @@map("photo_products")
}

model Employee {
  id              Int             @id @default(autoincrement())
  name            String
  login           String          @unique
  password        String
  screeens        Screens[]
  activeAccount   Boolean         @default(true)
  establishmentId Int
  admissionDate   DateTime        @default(now())
  resignationDate DateTime?
  EmployeePhoto   EmployeePhoto[]

  @@map("employees")
}

model EmployeePhoto {
  id           Int      @id @default(autoincrement())
  filename     String
  originalname String
  employee_id  Int
  Employee     Employee @relation(fields: [employee_id], references: [id])
  url          String
  created_at   DateTime @default(now())
  updeated_at  DateTime @default(now()) @updatedAt

  @@map("employees_photo")
}

model Screens {
  id       Int        @id @default(autoincrement())
  name     String
  surname  String
  employee Employee[]
}
